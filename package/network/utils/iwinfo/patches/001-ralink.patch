--- /dev/null
+++ b/api/mtk.h
@@ -0,0 +1,276 @@
+#ifndef _MTK_H
+#define _MTK_H
+
+#define USHORT  unsigned short
+#define UCHAR   unsigned char
+#define ULONG	unsigned long
+#define UINT8	unsigned char
+#define UINT16	unsigned short
+#define UINT32	unsigned int
+#define CHAR	char
+#define SHORT 	short
+#define INT32	int
+#define INT 	int
+
+#define MAX_NUMBER_OF_MAC		    116
+
+#define MODE_CCK		0
+#define MODE_OFDM		1
+#define MODE_HTMIX		2
+#define MODE_HTGREENFIELD	3
+#define MODE_VHT 4
+
+#define TMI_TX_RATE_OFDM_6M     11
+#define TMI_TX_RATE_OFDM_9M     15
+#define TMI_TX_RATE_OFDM_12M    10
+#define TMI_TX_RATE_OFDM_18M    14
+#define TMI_TX_RATE_OFDM_24M    9
+#define TMI_TX_RATE_OFDM_36M    13
+#define TMI_TX_RATE_OFDM_48M    8
+#define TMI_TX_RATE_OFDM_54M    12
+
+#define TMI_TX_RATE_CCK_1M_LP   0
+#define TMI_TX_RATE_CCK_2M_LP   1
+#define TMI_TX_RATE_CCK_5M_LP   2
+#define TMI_TX_RATE_CCK_11M_LP  3
+
+#define TMI_TX_RATE_CCK_2M_SP   5
+#define TMI_TX_RATE_CCK_5M_SP   6
+#define TMI_TX_RATE_CCK_11M_SP  7
+
+enum oid_bw {
+	BAND_WIDTH_20,
+	BAND_WIDTH_40,
+	BAND_WIDTH_80,
+	BAND_WIDTH_160,
+	BAND_WIDTH_10,
+	BAND_WIDTH_5,
+	BAND_WIDTH_BOTH,
+	BAND_WIDTH_25,
+	BAND_WIDTH_20_242TONE,
+	BAND_WIDTH_NUM
+};
+
+#define BW_20		BAND_WIDTH_20
+#define BW_40		BAND_WIDTH_40
+#define BW_80		BAND_WIDTH_80
+#define BW_160		BAND_WIDTH_160
+#define BW_10		BAND_WIDTH_10
+#define BW_5		BAND_WIDTH_5
+#define BW_25		BAND_WIDTH_25
+#define BW_20_242TONE	BAND_WIDTH_20_242TONE
+#define BW_NUM		BAND_WIDTH_NUM
+
+#define 		MAC_ADDR_LEN 6
+#define 		ETH_LENGTH_OF_ADDRESS 6
+#define 		MAX_LEN_OF_MAC_TABLE 128
+
+#define RT_PRIV_IOCTL				(SIOCIWFIRSTPRIV + 0x01)
+#define RTPRIV_IOCTL_SET			(SIOCIWFIRSTPRIV + 0x02)
+
+#define RTPRIV_IOCTL_BBP			(SIOCIWFIRSTPRIV + 0x03)
+#define RTPRIV_IOCTL_MAC			(SIOCIWFIRSTPRIV + 0x05)
+#define RTPRIV_IOCTL_E2P			(SIOCIWFIRSTPRIV + 0x07)
+
+#define RTPRIV_IOCTL_STATISTICS				(SIOCIWFIRSTPRIV + 0x09)
+#define RTPRIV_IOCTL_ADD_PMKID_CACHE		(SIOCIWFIRSTPRIV + 0x0A)
+#define RTPRIV_IOCTL_RADIUS_DATA			(SIOCIWFIRSTPRIV + 0x0C)
+#define RTPRIV_IOCTL_GSITESURVEY			(SIOCIWFIRSTPRIV + 0x0D)
+#define RTPRIV_IOCTL_ADD_WPA_KEY			(SIOCIWFIRSTPRIV + 0x0E)
+#define RTPRIV_IOCTL_GET_MAC_TABLE			(SIOCIWFIRSTPRIV + 0x0F)
+#define RTPRIV_IOCTL_GET_MAC_TABLE_STRUCT	(SIOCIWFIRSTPRIV + 0x1F)
+#define RTPRIV_IOCTL_STATIC_WEP_COPY		(SIOCIWFIRSTPRIV + 0x10)
+#define RTPRIV_IOCTL_WSC_PROFILE			(SIOCIWFIRSTPRIV + 0x12)
+#define	RTPRIV_IOCTL_GSTAINFO				(SIOCIWFIRSTPRIV + 0x1A)
+#define	RTPRIV_IOCTL_GSTAT					(SIOCIWFIRSTPRIV + 0x1B)
+#define RTPRIV_IOCTL_GRSSI					(SIOCIWFIRSTPRIV + 0x1C)
+#define RTPRIV_IOCTL_GTXBFCALP				(SIOCIWFIRSTPRIV + 0x1D)
+
+#define RT_QUERY_ATE_TXDONE_COUNT			0x0401
+#define OID_GET_SET_TOGGLE					0x8000
+#define OID_802_11_GET_COUNTRY_CODE				0x0716
+#define OID_802_11_BW						0x1903
+#define OID_GET_CHAN_LIST					0x0998
+#define OID_GET_WIRELESS_BAND				0x09B4
+#define OID_802_11_SECURITY_TYPE                0x093e
+#define GET_MAC_TABLE_STRUCT_FLAG_RAW_SSID	0x1
+
+#define OID_802_11_NETWORK_TYPES_SUPPORTED          0x0103
+#define OID_802_11_NETWORK_TYPE_IN_USE		   0x0104
+#define OID_802_11_RSSI_TRIGGER		          0x0107
+#define RT_OID_802_11_RSSI							0x0108 //rt2860 only , kathy
+#define RT_OID_802_11_RSSI_1						0x0109 //rt2860 only , kathy
+#define RT_OID_802_11_RSSI_2						0x010A //rt2860 only , kathy
+#define OID_802_11_NUMBER_OF_ANTENNAS		    0x010B
+#define OID_802_11_RX_ANTENNA_SELECTED		   0x010C
+#define OID_802_11_TX_ANTENNA_SELECTED		   0x010D
+#define OID_802_11_SUPPORTED_RATES		       0x010E
+#define OID_802_11_ADD_WEP				    0x0112
+#define OID_802_11_REMOVE_WEP				 0x0113
+#define OID_802_11_DISASSOCIATE		          0x0114
+#define OID_802_11_PRIVACY_FILTER		        0x0118
+#define OID_802_11_ASSOCIATION_INFORMATION          0x011E
+#define OID_802_11_TEST				       0x011F
+#define RT_OID_802_11_COUNTRY_REGION		     0x0507
+#define OID_802_11_BSSID_LIST_SCAN		       0x0508
+#define OID_802_11_SSID				       0x0509
+#define OID_802_11_BSSID				      0x050A
+#define RT_OID_802_11_RADIO				   0x050B
+#define RT_OID_802_11_PHY_MODE				0x050C
+#define RT_OID_802_11_STA_CONFIG		         0x050D
+#define OID_802_11_DESIRED_RATES		         0x050E
+#define RT_OID_802_11_PREAMBLE				0x050F
+#define OID_802_11_WEP_STATUS				 0x0510
+#define OID_802_11_AUTHENTICATION_MODE		   0x0511
+#define OID_802_11_INFRASTRUCTURE_MODE		   0x0512
+#define RT_OID_802_11_RESET_COUNTERS		     0x0513
+#define OID_802_11_RTS_THRESHOLD		         0x0514
+#define OID_802_11_FRAGMENTATION_THRESHOLD          0x0515
+#define OID_802_11_POWER_MODE				 0x0516
+#define OID_802_11_TX_POWER_LEVEL		        0x0517
+#define RT_OID_802_11_ADD_WPA				 0x0518
+#define OID_802_11_REMOVE_KEY				 0x0519
+#define OID_802_11_ADD_KEY				    0x0520
+#define OID_802_11_CONFIGURATION		         0x0521
+#define OID_802_11_TX_PACKET_BURST					0x0522
+#define RT_OID_802_11_QUERY_NOISE_LEVEL		  0x0523
+#define RT_OID_802_11_EXTRA_INFO		         0x0524
+#define RT_OID_802_11_HARDWARE_REGISTER		  0x0525
+#define OID_802_11_ENCRYPTION_STATUS		     OID_802_11_WEP_STATUS
+
+#define RT_OID_DEVICE_NAME				    0x0607
+#define RT_OID_VERSION_INFO				   0x0608
+#define OID_802_11_BSSID_LIST				 0x0609
+#define OID_802_3_CURRENT_ADDRESS		        0x060A
+#define OID_GEN_MEDIA_CONNECT_STATUS		     0x060B
+#define RT_OID_802_11_QUERY_LINK_STATUS		  0x060C
+#define OID_802_11_RSSI				       0x060D
+#define OID_802_11_STATISTICS				 0x060E
+#define OID_GEN_RCV_OK				        0x060F
+#define OID_GEN_RCV_NO_BUFFER				 0x0610
+#define RT_OID_802_11_QUERY_EEPROM_VERSION          0x0611
+#define RT_OID_802_11_QUERY_FIRMWARE_VERSION        0x0612
+#define RT_OID_802_11_QUERY_LAST_RX_RATE		 0x0613
+#define RT_OID_802_11_TX_POWER_LEVEL_1		   0x0614
+#define RT_OID_802_11_QUERY_PIDVID		       0x0615
+
+//#if WPA_SUPPLICANT_SUPPORT
+#define OID_SET_COUNTERMEASURES		          0x0616
+#define OID_802_11_SET_IEEE8021X		         0x0617
+#define OID_802_11_SET_IEEE8021X_REQUIRE_KEY        0x0618
+#define OID_802_11_PMKID				      0x0620
+#define RT_OID_WPA_SUPPLICANT_SUPPORT					0x0621
+#define RT_OID_WE_VERSION_COMPILED		       0x0622
+//#endif
+
+//rt2860 , kathy
+#define	RT_OID_802_11_SNR_0							0x0630
+#define	RT_OID_802_11_SNR_1							0x0631
+#define	RT_OID_802_11_QUERY_LAST_TX_RATE			0x0632
+#define	RT_OID_802_11_QUERY_HT_PHYMODE				0x0633
+#define	RT_OID_802_11_SET_HT_PHYMODE				0x0634
+#define	OID_802_11_RELOAD_DEFAULTS					0x0635
+#define	RT_OID_802_11_QUERY_APSD_SETTING			0x0636
+#define	RT_OID_802_11_SET_APSD_SETTING				0x0637
+#define	RT_OID_802_11_QUERY_APSD_PSM				0x0638
+#define	RT_OID_802_11_SET_APSD_PSM					0x0639
+#define	RT_OID_802_11_QUERY_DLS						0x063A
+#define	RT_OID_802_11_SET_DLS						0x063B
+#define	RT_OID_802_11_QUERY_DLS_PARAM				0x063C
+#define	RT_OID_802_11_SET_DLS_PARAM					0x063D
+#define RT_OID_802_11_QUERY_WMM		   		0x063E
+#define RT_OID_802_11_SET_WMM      					0x063F
+#define RT_OID_802_11_QUERY_IMME_BA_CAP				0x0640
+#define RT_OID_802_11_SET_IMME_BA_CAP				0x0641
+#define RT_OID_802_11_QUERY_BATABLE					0x0642
+#define RT_OID_802_11_ADD_IMME_BA					0x0643
+#define RT_OID_802_11_TEAR_IMME_BA					0x0644
+#define RT_OID_DRIVER_DEVICE_NAME		        0x0645
+#define RT_OID_802_11_QUERY_DAT_HT_PHYMODE          0x0646
+#define RT_OID_QUERY_MULTIPLE_CARD_SUPPORT          0x0647
+#define OID_802_11_SET_PSPXLINK_MODE				0x0648
+#define OID_802_11_SET_PASSPHRASE					0x0649
+#define RT_OID_802_11_SNR_2							0x064a
+#define RT_OID_802_11_STREAM_SNR					0x064b
+#define RT_OID_802_11_QUERY_TXBF_TABLE				0x0650
+#define RT_OID_802_11_WSC_QUERY_PROFILE				0x0750
+#define RT_OID_WSC_UUID				       0x0753
+
+
+#define RT_OID_802_11_BSSID		        (OID_GET_SET_TOGGLE | OID_802_11_BSSID)
+#define RT_OID_802_11_SSID		         (OID_GET_SET_TOGGLE | OID_802_11_SSID)
+#define RT_OID_802_11_INFRASTRUCTURE_MODE     (OID_GET_SET_TOGGLE | OID_802_11_INFRASTRUCTURE_MODE)
+#define RT_OID_802_11_ADD_WEP		      (OID_GET_SET_TOGGLE | OID_802_11_ADD_WEP)
+#define RT_OID_802_11_ADD_KEY		      (OID_GET_SET_TOGGLE | OID_802_11_ADD_KEY)
+#define RT_OID_802_11_REMOVE_WEP		   (OID_GET_SET_TOGGLE | OID_802_11_REMOVE_WEP)
+#define RT_OID_802_11_REMOVE_KEY		   (OID_GET_SET_TOGGLE | OID_802_11_REMOVE_KEY)
+#define RT_OID_802_11_DISASSOCIATE		 (OID_GET_SET_TOGGLE | OID_802_11_DISASSOCIATE)
+#define RT_OID_802_11_AUTHENTICATION_MODE     (OID_GET_SET_TOGGLE | OID_802_11_AUTHENTICATION_MODE)
+#define RT_OID_802_11_PRIVACY_FILTER          (OID_GET_SET_TOGGLE | OID_802_11_PRIVACY_FILTER)
+#define RT_OID_802_11_BSSID_LIST_SCAN         (OID_GET_SET_TOGGLE | OID_802_11_BSSID_LIST_SCAN)
+#define RT_OID_802_11_WEP_STATUS		   (OID_GET_SET_TOGGLE | OID_802_11_WEP_STATUS)
+#define RT_OID_802_11_RELOAD_DEFAULTS         (OID_GET_SET_TOGGLE | OID_802_11_RELOAD_DEFAULTS)
+#define RT_OID_802_11_NETWORK_TYPE_IN_USE     (OID_GET_SET_TOGGLE | OID_802_11_NETWORK_TYPE_IN_USE)
+#define RT_OID_802_11_TX_POWER_LEVEL          (OID_GET_SET_TOGGLE | OID_802_11_TX_POWER_LEVEL)
+#define RT_OID_802_11_RSSI_TRIGGER		 (OID_GET_SET_TOGGLE | OID_802_11_RSSI_TRIGGER)
+#define RT_OID_802_11_FRAGMENTATION_THRESHOLD (OID_GET_SET_TOGGLE | OID_802_11_FRAGMENTATION_THRESHOLD)
+#define RT_OID_802_11_RTS_THRESHOLD		(OID_GET_SET_TOGGLE | OID_802_11_RTS_THRESHOLD)
+#define RT_OID_802_11_RX_ANTENNA_SELECTED     (OID_GET_SET_TOGGLE | OID_802_11_RX_ANTENNA_SELECTED)
+#define RT_OID_802_11_TX_ANTENNA_SELECTED     (OID_GET_SET_TOGGLE | OID_802_11_TX_ANTENNA_SELECTED)
+#define RT_OID_802_11_SUPPORTED_RATES         (OID_GET_SET_TOGGLE | OID_802_11_SUPPORTED_RATES)
+#define RT_OID_802_11_DESIRED_RATES		(OID_GET_SET_TOGGLE | OID_802_11_DESIRED_RATES)
+#define RT_OID_802_11_CONFIGURATION		(OID_GET_SET_TOGGLE | OID_802_11_CONFIGURATION)
+#define RT_OID_802_11_POWER_MODE		   (OID_GET_SET_TOGGLE | OID_802_11_POWER_MODE)
+
+struct security_info {
+	unsigned int ifindex;
+	unsigned int auth_mode;
+	unsigned int encryp_type;
+};
+
+typedef union _HTTRANSMIT_SETTING {
+	struct  {
+		unsigned short	MCS:6;  // MCS
+		unsigned short	ldpc:1;
+		unsigned short	BW:2;   //channel bandwidth 20MHz or 40 MHz
+		unsigned short	ShortGI:1;
+		unsigned short	STBC:1; //SPACE
+		unsigned short	eTxBF:1;
+		unsigned short	iTxBF:1;
+		unsigned short	MODE:3; // Use definition MODE_xxx.
+	} field;
+	unsigned short	word;
+} HTTRANSMIT_SETTING, *PHTTRANSMIT_SETTING;
+
+typedef struct _RT_802_11_MAC_ENTRY {
+	unsigned char		ApIdx;
+	unsigned char		Addr[6];
+	unsigned char		Aid;
+	unsigned char		Psm;     // 0:PWR_ACTIVE, 1:PWR_SAVE
+	unsigned char		MimoPs;  // 0:MMPS_STATIC, 1:MMPS_DYNAMIC, 3:MMPS_Enabled
+	char			AvgRssi0;
+	char			AvgRssi1;
+	char			AvgRssi2;
+	char			AvgRssi3;
+	unsigned int		ConnectedTime;
+	HTTRANSMIT_SETTING	TxRate;
+	unsigned int		LastRxRate;
+	short			StreamSnr[3];
+	short			SoundingRespSnr[3];
+	unsigned long		TxPackets;
+	unsigned long		RxPackets;
+	unsigned long		TxBytes;
+	unsigned long		RxBytes;
+	unsigned int		EncryMode;
+	unsigned int		AuthMode;
+} RT_802_11_MAC_ENTRY, *PRT_802_11_MAC_ENTRY;
+
+typedef struct _RT_802_11_MAC_TABLE {
+	unsigned long		Num;
+	RT_802_11_MAC_ENTRY	Entry[MAX_NUMBER_OF_MAC];
+} RT_802_11_MAC_TABLE, *PRT_802_11_MAC_TABLE;
+
+void getRate(HTTRANSMIT_SETTING HTSetting, unsigned long *fLastTxRxRate);
+unsigned int cck_to_mcs(unsigned int mcs);
+
+#endif
--- a/api/wext.h
+++ b/api/wext.h
@@ -458,6 +458,7 @@ /* Modes of operation */
 #define IW_MODE_REPEAT	4	/* Wireless Repeater (forwarder) */
 #define IW_MODE_SECOND	5	/* Secondary master/repeater (backup) */
 #define IW_MODE_MONITOR	6	/* Passive monitor (listen only) */
+#define IW_MODE_MESH	7	/* Mesh (IEEE 802.11s) network */
 
 /* Statistics flags (bitmask in updated) */
 #define IW_QUAL_QUAL_UPDATED	0x01	/* Value was updated since last read */
--- a/include/iwinfo/lua.h
+++ b/include/iwinfo/lua.h
@@ -37,6 +37,10 @@
 #define IWINFO_MADWIFI_META	"iwinfo.madwifi"
 #endif
 
+#ifdef USE_MTK
+#define IWINFO_MTK_META     "iwinfo.mtk"
+#endif
+
 #ifdef USE_NL80211
 #define IWINFO_NL80211_META	"iwinfo.nl80211"
 #endif
--- a/include/iwinfo.h
+++ b/include/iwinfo.h
@@ -412,6 +412,7 @@ extern const struct iwinfo_ops wext_ops;
 extern const struct iwinfo_ops madwifi_ops;
 extern const struct iwinfo_ops nl80211_ops;
 extern const struct iwinfo_ops wl_ops;
+extern const struct iwinfo_ops mtk_ops;
 
 #include "iwinfo/utils.h"
 
--- a/iwinfo_lib.c
+++ b/iwinfo_lib.c
@@ -388,6 +388,9 @@ static const struct iwinfo_ops *backends
 #ifdef USE_MADWIFI
 	&madwifi_ops,
 #endif
+#ifdef USE_MTK
+	&mtk_ops,
+#endif
 #ifdef USE_WL
 	&wl_ops,
 #endif
--- a/iwinfo_lua.c
+++ b/iwinfo_lua.c
@@ -686,6 +686,35 @@ static int iwinfo_L_countrylist(lua_Stat
 	return 1;
 }
 
+#ifdef USE_MTK
+/* MTK */
+LUA_WRAP_INT_OP(mtk,channel)
+LUA_WRAP_INT_OP(mtk,frequency)
+LUA_WRAP_INT_OP(mtk,frequency_offset)
+LUA_WRAP_INT_OP(mtk,txpower)
+LUA_WRAP_INT_OP(mtk,txpower_offset)
+LUA_WRAP_INT_OP(mtk,bitrate)
+LUA_WRAP_INT_OP(mtk,signal)
+LUA_WRAP_INT_OP(mtk,noise)
+LUA_WRAP_INT_OP(mtk,quality)
+LUA_WRAP_INT_OP(mtk,quality_max)
+LUA_WRAP_STRING_OP(mtk,ssid)
+LUA_WRAP_STRING_OP(mtk,bssid)
+LUA_WRAP_STRING_OP(mtk,country)
+LUA_WRAP_STRING_OP(mtk,hardware_name)
+LUA_WRAP_STRING_OP(mtk,phyname)
+LUA_WRAP_STRUCT_OP(mtk,mode)
+LUA_WRAP_STRUCT_OP(mtk,assoclist)
+LUA_WRAP_STRUCT_OP(mtk,txpwrlist)
+LUA_WRAP_STRUCT_OP(mtk,scanlist)
+LUA_WRAP_STRUCT_OP(mtk,freqlist)
+LUA_WRAP_STRUCT_OP(mtk,countrylist)
+LUA_WRAP_STRUCT_OP(mtk,hwmodelist)
+LUA_WRAP_STRUCT_OP(mtk,htmodelist)
+LUA_WRAP_STRUCT_OP(mtk,encryption)
+LUA_WRAP_STRUCT_OP(mtk,mbssid_support)
+LUA_WRAP_STRUCT_OP(mtk,hardware_id)
+#endif
 
 #ifdef USE_WL
 /* Broadcom */
@@ -906,6 +935,40 @@ static const luaL_reg
 };
 #endif
 
+#ifdef USE_MTK
+/* MTK table */
+static const luaL_reg R_mtk[] = {
+	LUA_REG(mtk,channel),
+	LUA_REG(mtk,frequency),
+	LUA_REG(mtk,frequency_offset),
+	LUA_REG(mtk,txpower),
+	LUA_REG(mtk,txpower_offset),
+	LUA_REG(mtk,bitrate),
+	LUA_REG(mtk,signal),
+	LUA_REG(mtk,noise),
+	LUA_REG(mtk,quality),
+	LUA_REG(mtk,quality_max),
+	LUA_REG(mtk,mode),
+	LUA_REG(mtk,ssid),
+	LUA_REG(mtk,bssid),
+	LUA_REG(mtk,country),
+	LUA_REG(mtk,assoclist),
+	LUA_REG(mtk,txpwrlist),
+	LUA_REG(mtk,scanlist),
+	LUA_REG(mtk,freqlist),
+	LUA_REG(mtk,countrylist),
+	LUA_REG(mtk,hwmodelist),
+	LUA_REG(mtk,htmodelist),
+	LUA_REG(mtk,encryption),
+	LUA_REG(mtk,mbssid_support),
+	LUA_REG(mtk,hardware_id),
+	LUA_REG(mtk,hardware_name),
+	LUA_REG(mtk,phyname),
+	{ NULL, NULL }
+};
+
+#endif
+
 /* Wext table */
 #ifdef USE_WEXT
 static const luaL_reg R_wext[] = {
@@ -950,6 +1013,15 @@ static const luaL_reg R_common[] = {
 LUALIB_API int luaopen_iwinfo(lua_State *L) {
 	luaL_register(L, IWINFO_META, R_common);
 
+#ifdef USE_MTK
+	luaL_newmetatable(L, IWINFO_MTK_META);
+	luaL_register(L, NULL, R_common);
+	luaL_register(L, NULL, R_mtk);
+	lua_pushvalue(L, -1);
+	lua_setfield(L, -2, "__index");
+	lua_setfield(L, -2, "mtk");
+#endif
+
 #ifdef USE_WL
 	luaL_newmetatable(L, IWINFO_WL_META);
 	luaL_register(L, NULL, R_common);
--- a/iwinfo_wext.c
+++ b/iwinfo_wext.c
@@ -197,7 +197,7 @@ static int wext_get_center_chan2(const c
 	return -1;
 }
 
-static int wext_get_frequency(const char *ifname, int *buf)
+int wext_get_frequency(const char *ifname, int *buf)
 {
 	struct iwreq wrq;
 	struct iw_range range;
@@ -294,7 +294,7 @@ static int wext_get_noise(const char *if
 	return -1;
 }
 
-static int wext_get_quality(const char *ifname, int *buf)
+int wext_get_quality(const char *ifname, int *buf)
 {
 	struct iwreq wrq;
 	struct iw_statistics stats;
@@ -312,7 +312,7 @@ static int wext_get_quality(const char *
 	return -1;
 }
 
-static int wext_get_quality_max(const char *ifname, int *buf)
+int wext_get_quality_max(const char *ifname, int *buf)
 {
 	struct iwreq wrq;
 	struct iw_range range;
@@ -377,7 +377,7 @@ static int wext_get_txpwrlist(const char
 	return -1;
 }
 
-static int wext_get_freqlist(const char *ifname, char *buf, int *len)
+int wext_get_freqlist(const char *ifname, char *buf, int *len)
 {
 	struct iwreq wrq;
 	struct iw_range range;
@@ -421,7 +421,7 @@ static int wext_get_countrylist(const ch
 	return -1;
 }
 
-static int wext_get_hwmodelist(const char *ifname, int *buf)
+int wext_get_hwmodelist(const char *ifname, int *buf)
 {
 	char chans[IWINFO_BUFSIZE] = { 0 };
 	struct iwinfo_freqlist_entry *e = NULL;
--- a/iwinfo_utils.c
+++ b/iwinfo_utils.c
@@ -336,7 +336,7 @@ int iwinfo_hardware_id_from_mtd(struct i
 	{
 		if (fscanf(mtd, "mtd%d: %x %*x %127s", &off, &len, buf) < 3 ||
 		    (strcmp(buf, "\"boardconfig\"") && strcmp(buf, "\"EEPROM\"") &&
-		     strcmp(buf, "\"factory\"")))
+		     strcmp(buf, "\"Factory\"")))
 		{
 			off = -1;
 			continue;
@@ -407,7 +407,8 @@ int iwinfo_hardware_id_from_mtd(struct i
 
 				/* subsystem from EEPROM_NIC_CONF0_RF_TYPE */
 				id->subsystem_device_id = (bc[off + 0x1a] & 0x0f00) >> 8;
-			} else if ((bc[off] == 0x7620) || (bc[off] == 0x2076) ||
+			} else if ((bc[off] == 0x7615) || (bc[off] == 0x1576) ||
+			           (bc[off] == 0x7620) || (bc[off] == 0x2076) ||
 			           (bc[off] == 0x7628) || (bc[off] == 0x2876) ||
 			           (bc[off] == 0x7688) || (bc[off] == 0x8876)) {
 				/* vendor: MediaTek */
--- a/Makefile
+++ b/Makefile
@@ -39,6 +39,15 @@ ifneq ($(filter nl80211,$(IWINFO_BACKEND
 	IWINFO_LIB_OBJ     += iwinfo_nl80211.o
 endif
 
+ifneq ($(filter mtk,$(IWINFO_BACKENDS)),)
+   IWINFO_CFLAGS  += -DUSE_MTK
+   IWINFO_LIB_OBJ += iwinfo_mtk.o iwinfo_mtk_rate.o
+endif
+
+ifneq ($(filter mt7915,$(IWINFO_BACKENDS)),)
+   IWINFO_CFLAGS  += -DUSE_MTK -DUSE_MT7915
+   IWINFO_LIB_OBJ += iwinfo_mtk.o iwinfo_mtk_rate.o
+endif
 
 compile: clean $(IWINFO_LIB) $(IWINFO_LUA) $(IWINFO_CLI)
 
